module.exports = GroupBySequence;

var extends_       = require('typedef').extends;
var Sequence       = require('./Sequence.js');
var IterableGroup  = require('./IterableGroup.js');
var SequenceGroup  = require('./SequenceGroup.js');
var SelectIterable = require('./SelectIterable.js');

extends_(GroupBySequence, Sequence);

/**
 * A sequence generated by a groupBy operation. It is a sequence of
 * SequenceGroups
 * @constructor
 * @param {IterableGroup} source
 */
function GroupBySequence(source)
{
  // Transform source from an Iterable of IterableGroup into an Iterable of
  // IterableSequence
  source = new SelectIterable(source, function(g) {
    return new SequenceGroup(g.key, g);
  });

  Sequence.call(this, source);
}

/**
 * Transform this grouped sequence into a stringly-keyed array dictionary.
 * @return {object}
 */
GroupBySequence.prototype.toObject = function()
{
  var ret = {};

  var iter = this.iterator();
  for (var n; !(n = iter.next()).done; ) {
    var item = n.value;
    ret[item.key] = item.toArray();
  }

  return ret;
};

/**
 * Determine if this grouping has a specific key.
 * @param {string} key
 * @return {boolean} True if this sequence has a key
 */
GroupBySequence.prototype.hasKey = function(key)
{
  var iter = this.iterator();
  for (var n; !(n = iter.next()).done; ) {
    if (n.value.key === key)
      return true;
  }

  return false;
};


